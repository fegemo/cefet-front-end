{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/specificity/dist/specificity.js","scripts/classes/spec-tabajara.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"spec-tabajara.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(factory((global.SPECIFICITY = {})));\n}(this, (function (exports) { 'use strict';\n\n\t// Calculate the specificity for a selector by dividing it into simple selectors and counting them\n\tvar calculate = function(input) {\n\t\tvar selectors,\n\t\t\tselector,\n\t\t\ti,\n\t\t\tlen,\n\t\t\tresults = [];\n\n\t\t// Separate input by commas\n\t\tselectors = input.split(',');\n\n\t\tfor (i = 0, len = selectors.length; i < len; i += 1) {\n\t\t\tselector = selectors[i];\n\t\t\tif (selector.length > 0) {\n\t\t\t\tresults.push(calculateSingle(selector));\n\t\t\t}\n\t\t}\n\n\t\treturn results;\n\t};\n\n\t/**\n\t * Calculates the specificity of CSS selectors\n\t * http://www.w3.org/TR/css3-selectors/#specificity\n\t *\n\t * Returns an object with the following properties:\n\t *  - selector: the input\n\t *  - specificity: e.g. 0,1,0,0\n\t *  - parts: array with details about each part of the selector that counts towards the specificity\n\t *  - specificityArray: e.g. [0, 1, 0, 0]\n\t */\n\tvar calculateSingle = function(input) {\n\t\tvar selector = input,\n\t\t\tfindMatch,\n\t\t\ttypeCount = {\n\t\t\t\t'a': 0,\n\t\t\t\t'b': 0,\n\t\t\t\t'c': 0\n\t\t\t},\n\t\t\tparts = [],\n\t\t\t// The following regular expressions assume that selectors matching the preceding regular expressions have been removed\n\t\t\tattributeRegex = /(\\[[^\\]]+\\])/g,\n\t\t\tidRegex = /(#[^\\#\\s\\+>~\\.\\[:\\)]+)/g,\n\t\t\tclassRegex = /(\\.[^\\s\\+>~\\.\\[:\\)]+)/g,\n\t\t\tpseudoElementRegex = /(::[^\\s\\+>~\\.\\[:]+|:first-line|:first-letter|:before|:after)/gi,\n\t\t\t// A regex for pseudo classes with brackets - :nth-child(), :nth-last-child(), :nth-of-type(), :nth-last-type(), :lang()\n\t\t\t// The negation psuedo class (:not) is filtered out because specificity is calculated on its argument\n\t\t\t// :global and :local are filtered out - they look like psuedo classes but are an identifier for CSS Modules\n\t\t\tpseudoClassWithBracketsRegex = /(:(?!not|global|local)[\\w-]+\\([^\\)]*\\))/gi,\n\t\t\t// A regex for other pseudo classes, which don't have brackets\n\t\t\tpseudoClassRegex = /(:(?!not|global|local)[^\\s\\+>~\\.\\[:]+)/g,\n\t\t\telementRegex = /([^\\s\\+>~\\.\\[:]+)/g;\n\n\t\t// Find matches for a regular expression in a string and push their details to parts\n\t\t// Type is \"a\" for IDs, \"b\" for classes, attributes and pseudo-classes and \"c\" for elements and pseudo-elements\n\t\tfindMatch = function(regex, type) {\n\t\t\tvar matches, i, len, match, index, length;\n\t\t\tif (regex.test(selector)) {\n\t\t\t\tmatches = selector.match(regex);\n\t\t\t\tfor (i = 0, len = matches.length; i < len; i += 1) {\n\t\t\t\t\ttypeCount[type] += 1;\n\t\t\t\t\tmatch = matches[i];\n\t\t\t\t\tindex = selector.indexOf(match);\n\t\t\t\t\tlength = match.length;\n\t\t\t\t\tparts.push({\n\t\t\t\t\t\tselector: input.substr(index, length),\n\t\t\t\t\t\ttype: type,\n\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\tlength: length\n\t\t\t\t\t});\n\t\t\t\t\t// Replace this simple selector with whitespace so it won't be counted in further simple selectors\n\t\t\t\t\tselector = selector.replace(match, Array(length + 1).join(' '));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Replace escaped characters with plain text, using the \"A\" character\n\t\t// https://www.w3.org/TR/CSS21/syndata.html#characters\n\t\t(function() {\n\t\t\tvar replaceWithPlainText = function(regex) {\n\t\t\t\t\tvar matches, i, len, match;\n\t\t\t\t\tif (regex.test(selector)) {\n\t\t\t\t\t\tmatches = selector.match(regex);\n\t\t\t\t\t\tfor (i = 0, len = matches.length; i < len; i += 1) {\n\t\t\t\t\t\t\tmatch = matches[i];\n\t\t\t\t\t\t\tselector = selector.replace(match, Array(match.length + 1).join('A'));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t// Matches a backslash followed by six hexadecimal digits followed by an optional single whitespace character\n\t\t\t\tescapeHexadecimalRegex = /\\\\[0-9A-Fa-f]{6}\\s?/g,\n\t\t\t\t// Matches a backslash followed by fewer than six hexadecimal digits followed by a mandatory single whitespace character\n\t\t\t\tescapeHexadecimalRegex2 = /\\\\[0-9A-Fa-f]{1,5}\\s/g,\n\t\t\t\t// Matches a backslash followed by any character\n\t\t\t\tescapeSpecialCharacter = /\\\\./g;\n\n\t\t\treplaceWithPlainText(escapeHexadecimalRegex);\n\t\t\treplaceWithPlainText(escapeHexadecimalRegex2);\n\t\t\treplaceWithPlainText(escapeSpecialCharacter);\n\t\t}());\n\n\t\t// Remove anything after a left brace in case a user has pasted in a rule, not just a selector\n\t\t(function() {\n\t\t\tvar regex = /{[^]*/gm,\n\t\t\t\tmatches, i, len, match;\n\t\t\tif (regex.test(selector)) {\n\t\t\t\tmatches = selector.match(regex);\n\t\t\t\tfor (i = 0, len = matches.length; i < len; i += 1) {\n\t\t\t\t\tmatch = matches[i];\n\t\t\t\t\tselector = selector.replace(match, Array(match.length + 1).join(' '));\n\t\t\t\t}\n\t\t\t}\n\t\t}());\n\n\t\t// Add attribute selectors to parts collection (type b)\n\t\tfindMatch(attributeRegex, 'b');\n\n\t\t// Add ID selectors to parts collection (type a)\n\t\tfindMatch(idRegex, 'a');\n\n\t\t// Add class selectors to parts collection (type b)\n\t\tfindMatch(classRegex, 'b');\n\n\t\t// Add pseudo-element selectors to parts collection (type c)\n\t\tfindMatch(pseudoElementRegex, 'c');\n\n\t\t// Add pseudo-class selectors to parts collection (type b)\n\t\tfindMatch(pseudoClassWithBracketsRegex, 'b');\n\t\tfindMatch(pseudoClassRegex, 'b');\n\n\t\t// Remove universal selector and separator characters\n\t\tselector = selector.replace(/[\\*\\s\\+>~]/g, ' ');\n\n\t\t// Remove any stray dots or hashes which aren't attached to words\n\t\t// These may be present if the user is live-editing this selector\n\t\tselector = selector.replace(/[#\\.]/g, ' ');\n\n\t\t// Remove the negation psuedo-class (:not) but leave its argument because specificity is calculated on its argument\n\t \t// Remove non-standard :local and :global CSS Module identifiers because they do not effect the specificity\n\t\tselector = selector.replace(/:not/g, '    ');\n\t\tselector = selector.replace(/:local/g, '      ');\n\t\tselector = selector.replace(/:global/g, '       ');\n\t\tselector = selector.replace(/[\\(\\)]/g, ' ');\n\n\t\t// The only things left should be element selectors (type c)\n\t\tfindMatch(elementRegex, 'c');\n\n\t\t// Order the parts in the order they appear in the original selector\n\t\t// This is neater for external apps to deal with\n\t\tparts.sort(function(a, b) {\n\t\t\treturn a.index - b.index;\n\t\t});\n\n\t\treturn {\n\t\t\tselector: input,\n\t\t\tspecificity: '0,' + typeCount.a.toString() + ',' + typeCount.b.toString() + ',' + typeCount.c.toString(),\n\t\t\tspecificityArray: [0, typeCount.a, typeCount.b, typeCount.c],\n\t\t\tparts: parts\n\t\t};\n\t};\n\n\t/**\n\t * Compares two CSS selectors for specificity\n\t * Alternatively you can replace one of the CSS selectors with a specificity array\n\t *\n\t *  - it returns -1 if a has a lower specificity than b\n\t *  - it returns 1 if a has a higher specificity than b\n\t *  - it returns 0 if a has the same specificity than b\n\t */\n\tvar compare = function(a, b) {\n\t\tvar aSpecificity,\n\t\t\tbSpecificity,\n\t\t\ti;\n\n\t\tif (typeof a ==='string') {\n\t\t\tif (a.indexOf(',') !== -1) {\n\t\t\t\tthrow 'Invalid CSS selector';\n\t\t\t} else {\n\t\t\t\taSpecificity = calculateSingle(a)['specificityArray'];\n\t\t\t}\n\t\t} else if (Array.isArray(a)) {\n\t\t\tif (a.filter(function(e) { return (typeof e === 'number'); }).length !== 4) {\n\t\t\t\tthrow 'Invalid specificity array';\n\t\t\t} else {\n\t\t\t\taSpecificity = a;\n\t\t\t}\n\t\t} else {\n\t\t\tthrow 'Invalid CSS selector or specificity array';\n\t\t}\n\n\t\tif (typeof b ==='string') {\n\t\t\tif (b.indexOf(',') !== -1) {\n\t\t\t\tthrow 'Invalid CSS selector';\n\t\t\t} else {\n\t\t\t\tbSpecificity = calculateSingle(b)['specificityArray'];\n\t\t\t}\n\t\t} else if (Array.isArray(b)) {\n\t\t\tif (b.filter(function(e) { return (typeof e === 'number'); }).length !== 4) {\n\t\t\t\tthrow 'Invalid specificity array';\n\t\t\t} else {\n\t\t\t\tbSpecificity = b;\n\t\t\t}\n\t\t} else {\n\t\t\tthrow 'Invalid CSS selector or specificity array';\n\t\t}\n\n\t\tfor (i = 0; i < 4; i += 1) {\n\t\t\tif (aSpecificity[i] < bSpecificity[i]) {\n\t\t\t\treturn -1;\n\t\t\t} else if (aSpecificity[i] > bSpecificity[i]) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\n\t\treturn 0;\n\t};\n\n\texports.calculate = calculate;\n\texports.compare = compare;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","let spec = require('specificity'),\n\n  SpecificatorTabajara = function(inputEl, outputAEl, outputBEl,\n    outputCEl, buttonEl) {\n    this.inputEl = inputEl\n    this.outputAEl = outputAEl\n    this.outputBEl = outputBEl\n    this.outputCEl = outputCEl\n    this.buttonEl = buttonEl\n  }\n\n// attaches the event handlers\nSpecificatorTabajara.prototype.start = function() {\n  let specificator = this\n  this.buttonEl.onclick = function() {\n    specificator.calculate()\n  }\n}\n\nSpecificatorTabajara.prototype.calculate = function() {\n  // gets the value from the input\n  const input = this.inputEl.value\n  let result = spec.calculate(input)[0]\n\n  if (result && result.specificity) {\n    result = result.specificity.split(',')\n  } else {\n    result = [0, 0, 0, 0]\n  }\n\n  // sets the value of the 3 outputs\n  this.outputAEl.innerHTML = `${result[1]}`\n  this.outputBEl.innerHTML = `${result[2]}`\n  this.outputCEl.innerHTML = `${result[3]}`\n}\n\n\nlet options = {\n    input: 'spec-tabajara-input',\n    output: [\n      'spec-tabajara-output-a',\n      'spec-tabajara-output-b',\n      'spec-tabajara-output-c'],\n    button: 'spec-tabajara-button'\n  },\n  inputEl = document.getElementById(options.input)\n\nif (inputEl) {\n  new SpecificatorTabajara(\n    inputEl,\n    document.getElementById(options.output[0]),\n    document.getElementById(options.output[1]),\n    document.getElementById(options.output[2]),\n    document.getElementById(options.button)\n  ).start()\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}